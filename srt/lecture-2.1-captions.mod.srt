1
00:00:01,320 --> 00:00:06,120
Hello, welcome to the short training 2.1!

2
00:00:06,120 --> 00:00:09,660
Let's introduce the ARCADE Framework

3
00:00:11,000 --> 00:00:23,580
The main purpose of the Arcade Framework is the integrated management of safety assurance information together with regular project development information.

4
00:00:24,720 --> 00:00:40,380
The image illustrates the Framework application context, where project and safety analysis teams use the same project management tools to store and retrieve information of the development lifecycle of a system.

5
00:00:41,880 --> 00:00:50,280
safety analysis teams, in particular, need to produce artifacts for certification, such as safety assurance cases.

6
00:00:50,280 --> 00:01:04,500
This task can be complex if the project data does not conform to a defined underlying information metamodel or when data related to safety assurance is disconnected from regular project data.

7
00:01:05,940 --> 00:01:15,540
the ARCADE Framework provides support for the development process and preparation for certification through a series of features.

8
00:01:15,540 --> 00:01:32,760
the ARCADE promotes integrated management of safety assurance data using common project management tools, such as the Issue Tracking Systems or Application Lifecycle Management.

9
00:01:32,760 --> 00:01:43,340
ARCADE supports the automated extraction of project data to perform a variety of analyses, so that we could integrate it more easily into the a development pipeline.

10
00:01:43,340 --> 00:01:59,160
ARCADE also performs data consistency analysis according to the Safety Assurance Information Model along with other rules that are implemented in the internal ontology

11
00:02:01,020 --> 00:02:11,760
This framework also supports knowledge discovery by generating reports to classify and cross-reference explicit and implicit information extracted from management tools.

12
00:02:14,160 --> 00:02:22,440
We call "implicit" information those which are inferred from the explicit information extracted from tools. 

13
00:02:22,440 --> 00:02:27,360
this contributes to a better knowledge discovery within the project's repository.

14
00:02:27,360 --> 00:02:35,940
Finally, ARCADE automatically generates fragments of safety assurance cases based on a couple of argumentation patterns.

15
00:02:38,400 --> 00:02:51,000
the goal is to provide safety teams with multiple perspectives over the same data without the need to manually built different safety assurance cases in a visual modeling tool.

16
00:02:51,000 --> 00:02:55,020
the scenarios of use that ARCADE helps to automate are:

17
00:02:55,020 --> 00:02:57,600
reviewing project and assurance information,

18
00:02:59,400 --> 00:03:04,200
exploring this information with a focus on knowledge discovery,

19
00:03:04,200 --> 00:03:13,200
and producing safety assurance case reports for a project by reusing the automatically generated fragments.

20
00:03:15,120 --> 00:03:20,700
the framework workflow starts with the extraction of information from the project management tool

21
00:03:20,700 --> 00:03:30,600
In this version of the framework, we connect ARCADE with a Jira instance that contains issues, fields within those issues, and links between issues.

22
00:03:30,600 --> 00:03:39,060
Issue data is extracted by ARCADE and fed into an internal model based on the schema of the Safety Assurance Information Model.

23
00:03:40,560 --> 00:03:46,380
this internal model is loaded into the internal ontology of ARCADE, which performs the following actions:

24
00:03:46,380 --> 00:03:58,860
verification of data consistency: if inconsistencies are found, explanations are computed to highlight the item of project data that have deviations, also highlighting which rules were violated.

25
00:03:58,860 --> 00:04:12,660
if the data is consistent, implicit classifications will be inferred, and the inferred data is fed back into the ontology, thus leaving the internal model with a mix of provided and inferred data.

26
00:04:14,280 --> 00:04:24,240
on top of this combined data, queries are performed to retrieve information according to a set of competence questions implemented in the framework.

27
00:04:24,240 --> 00:04:28,980
later on this video, some of these questions implemented in ARCADE will be shown.

28
00:04:28,980 --> 00:04:39,060
"competence question" is a term from the ontology domain and represents a relevant question that a knowledge-based system needs to respond to users.

29
00:04:40,500 --> 00:04:51,660
in ARCADE, the competence questions were devise to support the work of the development and safety teams, focusing on extracting information about the project's traceability.

30
00:04:53,220 --> 00:05:00,600
finally, also on top of the same combined data, it is carried out some queries and the construction of arguments in GSN notation.

31
00:05:00,600 --> 00:05:11,520
we use the term "fragment" to denote that the arguments generated are not complete assurance cases reports, but rather a partial view that follows a pattern of argumentation from the literature.

32
00:05:13,380 --> 00:05:26,280
in this video we'll present an ARCADE version deployed at a web address, which connects with a project management tool that we chose for initial integration.

33
00:05:26,280 --> 00:05:33,540
this Atlassian Jira was customized to adopt the Safety Assurance Information model as shown on training 1.2.

34
00:05:35,760 --> 00:05:54,060
This is the main screen of the ARCADE tool, there are some pages with more detailed information about how the framework operates, how to adapt it for use, and a breakdown of the features and design decisions related to its development.

35
00:05:54,060 --> 00:05:56,100
let's use the ARCADE tool.

36
00:06:01,260 --> 00:06:08,580
The tool starts with loading the ontology specification, which contains the rules and axioms verified by ARCADE.

37
00:06:08,580 --> 00:06:12,600
the tool already leaves this specification preloaded.

38
00:06:12,600 --> 00:06:18,120
the specification can be seen in these links at the beginning of the home page.

39
00:06:18,120 --> 00:06:25,680
if you want to reset the ontology, just click on "Reset" and the ontology is reloaded in the system.

40
00:06:27,660 --> 00:06:35,100
the project data extraction is available for three projects hosted in the Jira instance.

41
00:06:35,100 --> 00:06:43,800
the Open PCA project has already been explored in the first part of this evaluation and in this second part we are going to explore the DRONE project.

42
00:06:44,760 --> 00:06:56,160
To load a project, ARCADE connects to the issue tracking system through the external access API and retrieves project data in proprietary format defined by Jira.

43
00:06:57,060 --> 00:07:02,340
this data is transformed to the internal model and then fed into the internal ontology

44
00:07:03,660 --> 00:07:08,760
Let's load Open PCA Project data directly from Jira.

45
00:07:08,760 --> 00:07:22,200
this may take a few seconds, because after transferring and transforming the data, ARCADE triggers consistency analysis routines, classification of information and generation of safety assurance cases.

46
00:07:23,340 --> 00:07:28,200
if the data loading has no problems, a success message is shown.

47
00:07:32,220 --> 00:07:36,900
some technical data is shown in the "details" section.

48
00:07:41,460 --> 00:07:48,240
the number of items that were recovered, including number of issues, components and custom fields.

49
00:07:48,240 --> 00:07:52,980
anything that is an element of the model, for example, assumptions and justifications.

50
00:07:52,980 --> 00:07:55,980
number of relationships between items.

51
00:07:55,980 --> 00:07:59,580
quantity of attributes related to these items.

52
00:07:59,580 --> 00:08:08,340
regarding the inferred data, the details show new inferred classifications for items and new inferred relationships.

53
00:08:13,740 --> 00:08:19,380
Let's show how ARCADE supports knowledge discovery using the Open PCA project.

54
00:08:19,380 --> 00:08:26,040
the Jira project was automatically loaded with 94 objects from the Safety Assurance Information Model

55
00:08:26,040 --> 00:08:30,480
these objects comprise issues, components and custom fields.

56
00:08:30,480 --> 00:08:50,940
for example, issue OPENPCA-71 is registered in Jira as a "Story" and was then mapped as a "Requirement".

57
00:08:53,520 --> 00:08:57,840
some fields were extracted to fill the attributes of model:

58
00:08:57,840 --> 00:09:10,380
name, description, status, creation date, update date and a URL in case you want to access the same issue in the original tool.

59
00:09:13,860 --> 00:09:24,420
some elements of the model, which were mapped as custom fields in Jira, are imported as separate objects, such as assumptions and justifications.

60
00:09:26,640 --> 00:09:31,560
and, finally, relationships with other issues were also extracted.

61
00:09:31,560 --> 00:09:36,960
in the example show, the requirement is refined by three other requirements.

62
00:09:39,240 --> 00:09:48,780
This view differs from the view provided by the Jira as the semantics of the model were applied.

63
00:09:48,780 --> 00:09:52,320
Another example is "Component 10026".

64
00:09:59,880 --> 00:10:09,640
"Component 10026" is an internal Jira identifier, but the name visible to Jira users is "Control Panel".

65
00:10:10,620 --> 00:10:18,780
we can see that the component in Jira has been imported as an element of type "Component".

66
00:10:20,340 --> 00:10:31,380
the associations between a component and the issues were imported as "allocates" relationship (in the case of requirements).

67
00:10:32,340 --> 00:10:37,340
now we see an example of inferred information.

68
00:10:37,340 --> 00:10:44,640
in this case these requirements are refinements of other requirements, which are already explicitly linked to this component.

69
00:10:45,660 --> 00:10:55,320
by our model, there is an inference rule that requirements wchi are refinements are also allocated in the same component.

70
00:10:57,420 --> 00:11:05,280
in this way, we have a richer view on the participation of any component in the system design.

71
00:11:06,660 --> 00:11:08,460
Let's show the competence questions.

72
00:11:11,820 --> 00:11:14,220
We have two groups of competence questions:

73
00:11:14,220 --> 00:11:20,160
"Basic" questions and "traceability gaps" questions.

74
00:11:22,440 --> 00:11:30,780
The items and links lists that we saw above contain the answers for the first two basic questions.

75
00:11:30,780 --> 00:11:38,820
Which are questions that aim to retrieve the objects and their classifications, as well as relationships between the objects.

76
00:11:39,780 --> 00:11:42,240
all these items can be found in the view above.

77
00:11:43,680 --> 00:11:49,620
in the basic questions group, we expect to find items that match the question.

78
00:11:49,620 --> 00:11:56,840
if no items are returned, it means there is not yet in the original repository any project items with this classification.

79
00:11:56,840 --> 00:12:03,780
Such absence has to be analyzed by the project traceability review responsible.

80
00:12:05,760 --> 00:12:10,260
the second group of competence questions is related to traceability gaps.

81
00:12:13,320 --> 00:12:18,900
Different from the basic group, the expectation is not to find items that match the question.

82
00:12:18,900 --> 00:12:23,940
It is up to the team to review whether the identified gaps are really a problem.

83
00:12:26,760 --> 00:12:33,720
as an example, question CQ13 asks what are the requirements that are not allocated to any component.

84
00:12:34,860 --> 00:12:42,960
In this case, we found requirements that are not allocated to any component, not even an inferred allocation.

85
00:12:42,960 --> 00:12:49,920
It's up to the team to decide if this is an issue for project traceability.

86
00:12:51,600 --> 00:13:01,560
ARCADE's intention is not to replace safety assurance specialists but to support their work by showing classified and filtered information.

87
00:13:01,560 --> 00:13:08,040
it is also important to emphasize that ARCADE is not a modeling tool, nor does it store its own data.

88
00:13:08,040 --> 00:13:14,100
The team must fix any incorrectly classified or missing information.

89
00:13:14,100 --> 00:13:19,260
All data is in the original repository, in our case the Jira system.

90
00:13:19,260 --> 00:13:27,060
In this way, anyone consulting the project repository, or using the ARCADE, may deal with the correct and updated information.

91
00:13:28,740 --> 00:13:39,480
ARCADE was designed to be easily extended with new competence questions, according to specific needs of the projects.

92
00:13:39,480 --> 00:13:50,220
By using semantic web and description logic technologies, the extension of the Safety Assurance Information model and internal ontology is straightforward.

93
00:13:53,760 --> 00:13:55,860
Let's demonstrate the consistency analysis.

94
00:13:55,860 --> 00:14:03,240
when ARCADE finds no inconsistencies in the data loaded, the ontology is indicated as consistent.

95
00:14:03,240 --> 00:14:07,440
Let's demonstrate how ARCADE handles a set of data that contains inconsistencies.

96
00:14:07,440 --> 00:14:14,160
we have an example project, also based on the domain of analgesic infusion pumps.

97
00:14:14,160 --> 00:14:19,020
this data contains inconsistencies inside Jira and we are going to load it now.

98
00:14:20,640 --> 00:14:27,900
Please notice that loading of data with inconsistencies can take a while due to the computation of the explanations.

99
00:14:27,900 --> 00:14:35,280
after loading the data, there is information about whether the consistency is true or false. 

100
00:14:35,280 --> 00:14:43,020
if the consistency is false, explanations are computed to show which data items are in conflict with the model

101
00:14:43,020 --> 00:14:54,780
Let's see these explanations, the items are still listed and below we have the verification for inconsistencies.

102
00:14:57,600 --> 00:15:10,200
Here are listed the explanations, with a separation to show which items or links are involved, and which rules are impacted.

103
00:15:10,200 --> 00:15:24,960
let's see the first explanation. We have the item "GPCA-7" which has a classification as Hazard, and at the same time the item is marked as a mitigator of item "GPCA-9".

104
00:15:24,960 --> 00:15:40,000
however, by our rules, if a given object mitigates another, that object is a "safety requirement", and also by our rules we cannot have the same object being marked as a "requirement" and as a "hazard".

105
00:15:40,000 --> 00:15:46,620
So in this case we have an inconsistency. we have a hazard that is mitigating some other object.

106
00:15:50,580 --> 00:16:07,380
Another problem in the data is related to the item "GPCA-1", which is classified as a requirement. Item "GPCA-15" is marked as a refinement of "GPCA-1", but item "GPCA-15" is also classified as a "Design Definition".

107
00:16:08,340 --> 00:16:16,020
In that case, we have a rule that if any object refines or is refined by a requirement, that object is also a requirement.

108
00:16:16,740 --> 00:16:24,540
Similarly, there is a rule stating that items can not be at same time classified as a requirement and as a design definition.

109
00:16:25,560 --> 00:16:38,460
These are two examples of inconsistencies that can be found and highlighted by ARCADE to support teams

110
00:16:39,840 --> 00:16:44,640
As said before, ARCADE does not make any decision about corrections.

111
00:16:44,640 --> 00:16:53,340
Such decision is up to the team, which will fix items with a wrong classification.

112
00:16:55,200 --> 00:17:03,000
Let's go to Jira, correct this information and reload the GPCA project in our system.

113
00:17:07,320 --> 00:17:16,660
First let's see issue "GPCA-15", which in reality should have been classified as an requirement that refines the requirement "GPCA-1". 

114
00:17:16,280 --> 00:17:25,680
But it ended up being incorrectly marked as a "design definition".

115
00:17:25,680 --> 00:17:37,740
let's change the issue type, and then redo the loading of data in ARCADE.

116
00:17:37,740 --> 00:17:48,820
Another problem is related to the issue "GPCA-7", which is a hazard and there is a link to mitigated to requirement "GPCA-9". 

117
00:17:48,820 --> 00:17:54,720
It seems that there was am inversion of the relationship.

118
00:17:54,720 --> 00:17:59,880
Instead of being linked as "is mitigates by", it was linked "mitigates".

119
00:17:59,880 --> 00:18:15,880
let's remove the wrong relationship and redo it correctly. So now let's select "is mitigated by" item GPCA-9, which is the correct item here.

120
00:18:21,660 --> 00:18:33,380
let's now run again the data reload and see if the problems are solved. Just go to "Load project data" and then Load the project from Jira system again...

121
00:18:36,120 --> 00:18:37,140
let's see.

122
00:18:37,140 --> 00:18:39,060
The reload is finished.

123
00:18:39,060 --> 00:18:41,160
we can see that the consistency is true now.

124
00:18:42,300 --> 00:18:48,720
there are no more inconsistencies in the GPCA project.

125
00:18:48,720 --> 00:18:52,440
let's see the items.

126
00:18:54,060 --> 00:19:01,200
"GPCA-1" has a refinement to "GPCA-15", and "GPCA-15" is being classified as a requirement.

127
00:19:01,200 --> 00:19:20,820
regarding the item "GPCA-7", now it has the correct direction of the mitigation relationship.

128
00:19:24,780 --> 00:19:29,160
let's check the generation of fragments of safety assurance cases.

129
00:19:29,160 --> 00:19:33,900
let's use the Open PCA project that is already loaded.

130
00:19:39,180 --> 00:19:47,760
so, at the bottom of the home page we have the argumentsthere are two argumentation patterns implemented that we selected from the literature.

131
00:19:47,760 --> 00:19:51,060
one pattern is the Functional Decomposition Pattern, and the second is the Hazard Avoidance Pattern.

132
00:19:51,060 --> 00:20:02,280
In the functional decomposition pattern, the skeleton of the argumentation is formed by the requirements and their refinements.

133
00:20:03,360 --> 00:20:10,200
in the hazard avoidance pattern, the argumentation is formed by the hazards, their refinements and the requirements that mitigate them.

134
00:20:12,300 --> 00:20:20,520
In this version of ARCADE, fragments are generated in GSN notation and in svg format.

135
00:20:26,460 --> 00:20:30,420
So here we can see the central part of the argument.

136
00:20:30,420 --> 00:20:39,720
The GSN notation has a visual syntax and it is the most used notation in academia and industry, according to several studies.

137
00:20:39,720 --> 00:20:51,000
It is straightforward to extend the framework to generate fragments in other patterns, formats or notations, depending on the specific needs of a team or an organization.

138
00:20:53,520 --> 00:20:57,420
Let's show the other pattern, the hazard avoidance.

139
00:21:04,560 --> 00:21:09,720
Both patterns are perspectives that complement each other and can be built on top of the same data.

140
00:21:09,720 --> 00:21:15,180
the manual construction of both perspectives would be quite laborious.

141
00:21:15,180 --> 00:21:19,980
the automated generation provides a preliminary view of the assurance cases effortlessly.

142
00:21:21,420 --> 00:21:25,860
Here we conclude the framework presentation.

143
00:21:25,860 --> 00:21:32,760
ARCADE aims to support teams to manage safety assurance information together with regular project information.

144
00:21:32,760 --> 00:21:43,620
This integrated management allows thorough analysis of data and automatic generation of artifacts focused on certification, such as assurance cases.

145
00:21:43,620 --> 00:21:48,000
In case of any question, please get in touch with our research team.

146
00:21:48,120 --> 00:21:49,080
Thank you for your attention and participation!
